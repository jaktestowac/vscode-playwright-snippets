{
  "Playwright page.goto": {
    "prefix": "pw-goto",
    "body": "await page.goto('$0');",
    "description": "Navigate to a URL"
  },
  "Playwright page.on console": {
    "prefix": "pw-page-on-console",
    "body": [
      "page.on('console', async msg => {",
      "\t${0:console.log(msg);}",
      "});"
    ],
    "description": "Listen for console events"
  },
  "Playwright page.screenshot": {
    "prefix": "pw-page-screenshot",
    "body": [
      "await page.screenshot({ path: '${0:screenshot.png}', fullPage: true });"
    ],
    "description": "Take a screenshot of the page"
  },
  "Playwright locator.screenshot": {
    "prefix": "pw-locator-screenshot",
    "body": [
      "await ${0:elementLocator}.screenshot({ path: '${1:screenshot.png}' });"
    ],
    "description": "Take a screenshot of the page"
  },
  "Playwright runtime annotations": {
    "prefix": "pw-runtime-annotations",
    "body": [
      "test.info().annotations.push({",
      "\ttype: 'browser version',",
      "\tdescription: browser.version(),",
      "});"
    ],
    "description": "Add runtime annotations"
  },
  "Playwright page.on response": {
    "prefix": "pw-page-on-response",
    "body": [
      "page.on('response', response => {",
      "\t${0:console.log(response.status());}",
      "});"
    ],
    "description": "Listen for response events"
  },
  "Playwright page.route": {
    "prefix": "pw-page-on-request",
    "body": [
      "await page.route('**/$1', async (route) => {",
      "\tif (route.request()) {",
      "\t\tawait route.fulfill({ body: JSON.stringify(mockedBody) })",
      "\t} else {",
      "\t\tawait route.continue()",
      "\t}",
      "})"
    ],
    "description": "Intercept network requests"
  },
  "Playwright expect().toHaveText": {
    "prefix": "pw-expect-toHaveText",
    "body": ["await expect(${1:elementLocator}).toHaveText($2);"],
    "description": "Expect an element to have text"
  },
  "Playwright expect().toBeVisible": {
    "prefix": "pw-expect-toBeVisible",
    "body": ["await expect(${1:elementLocator}).toBeVisible();"],
    "description": "Expect an element to be visible"
  },
  "Playwright expect().toBeEmpty": {
    "prefix": "pw-expect-toBeEmpty",
    "body": ["await expect(${1:elementLocator}).toBeEmpty();"],
    "description": "Expect an element to be empty"
  },
  "Playwright expect().toBeHidden": {
    "prefix": "pw-expect-toBeHidden",
    "body": ["await expect(${1:elementLocator}).toBeHidden();"],
    "description": "Expect an element to be hidden"
  },
  "Playwright expect().toBeEditable": {
    "prefix": "pw-expect-toBeEditable",
    "body": ["await expect(${1:elementLocator}).toBeEditable();"],
    "description": "Expect an element to be editable"
  },
  "Playwright expect().toBeEnabled": {
    "prefix": "pw-expect-toBeEnabled",
    "body": ["await expect(${1:elementLocator}).toBeEnabled();"],
    "description": "Expect an element to be enabled"
  },
  "Playwright expect().toBeDisabled": {
    "prefix": "pw-expect-toBeDisabled",
    "body": ["await expect(${1:elementLocator}).toBeDisabled();"],
    "description": "Expect an element to be disabled"
  },
  "Playwright expect().toBeFocused": {
    "prefix": "pw-expect-toBeFocused",
    "body": ["await expect(${1:elementLocator}).toBeFocused();"],
    "description": "Expect an element to be focused"
  },
  "Playwright expect().toBeInViewport": {
    "prefix": "pw-expect-toBeInViewport",
    "body": ["await expect(${1:elementLocator}).toBeInViewport();"],
    "description": "Expect an element to be in the viewport"
  },
  "Playwright expect().toHaveAccessibleDescription": {
    "prefix": "pw-expect-toHaveAccessibleDescription",
    "body": [
      "await expect(${1:elementLocator}).toHaveAccessibleDescription($2);"
    ],
    "description": "Expect an element to have an accessible description"
  },
  "Playwright expect().toHaveAccessibleName": {
    "prefix": "pw-expect-toHaveAccessibleName",
    "body": ["await expect(${1:elementLocator}).toHaveAccessibleName($2);"],
    "description": "Expect an element to have an accessible name"
  },
  "Playwright expect().toContainText": {
    "prefix": "pw-expect-toContainText",
    "body": ["await expect(${1:elementLocator}).toContainText($2);"],
    "description": "Expect an element to contain specific text"
  },
  "Playwright expect().toHaveValue": {
    "prefix": "pw-expect-toHaveValue",
    "body": ["await expect(${1:elementLocator}).toHaveValue($2);"],
    "description": "Expect an element to have a specific value"
  },
  "Playwright expect().toHaveValues": {
    "prefix": "pw-expect-toHaveValues",
    "body": ["await expect(${1:elementLocator}).toHaveValues([$2]);"],
    "description": "Expect an element to have specific values"
  },
  "Playwright expect().toHaveAttribute": {
    "prefix": "pw-expect-toHaveAttribute",
    "body": ["await expect(${1:elementLocator}).toHaveAttribute($2, $3);"],
    "description": "Expect an element to have a specific attribute"
  },
  "Playwright expect().toHaveClass": {
    "prefix": "pw-expect-toHaveClass",
    "body": ["await expect(${1:elementLocator}).toHaveClass($2);"],
    "description": "Expect an element to have a specific class"
  },
  "Playwright expect().toHaveCount": {
    "prefix": "pw-expect-toHaveCount",
    "body": ["await expect(${1:elementLocator}).toHaveCount($2);"],
    "description": "Expect an element to have a specific count"
  },
  "Playwright expect().toHaveCSS": {
    "prefix": "pw-expect-toHaveCSS",
    "body": ["await expect(${1:elementLocator}).toHaveCSS($2, $3);"],
    "description": "Expect an element to have specific CSS property"
  },
  "Playwright expect().toHaveId": {
    "prefix": "pw-expect-toHaveId",
    "body": ["await expect(${1:elementLocator}).toHaveId($2);"],
    "description": "Expect an element to have a specific ID"
  },
  "Playwright expect().toHaveTitle": {
    "prefix": "pw-expect-toHaveTitle",
    "body": ["await expect(page).toHaveTitle($1);"],
    "description": "Expect the page to have a specific title"
  },
  "Playwright expect().toHaveJSProperty": {
    "prefix": "pw-expect-toHaveJSProperty",
    "body": ["await expect(${1:elementLocator}).toHaveJSProperty($2, $3);"],
    "description": "Expect an element to have a specific JavaScript property"
  },
  "Playwright expect().toHaveRole": {
    "prefix": "pw-expect-toHaveRole",
    "body": ["await expect(${1:elementLocator}).toHaveRole($2);"],
    "description": "Expect an element to have a specific role"
  },
  "Playwright expect().toHaveURL": {
    "prefix": "pw-expect-toHaveURL",
    "body": ["await expect(page).toHaveURL($1);"],
    "description": "Expect the page to have a specific URL"
  },
  "Playwright expect().toHaveScreenshot": {
    "prefix": "pw-expect-toHaveScreenshot",
    "body": ["await expect(page).toHaveScreenshot();"],
    "description": "Expect the page to have a screenshot"
  },
  "Playwright network slomo option for a test": {
    "prefix": "pw-test-use-network-slomo",
    "body": ["test.use({ launchOptions: { slowMo: ${1:1_000} } });"],
    "description": "Slow down Playwright operations"
  },
  "Playwright testIdAttribute for a test": {
    "prefix": "pw-test-use-testIdAttribute",
    "body": ["test.use({ testIdAttribute : '${1:1_000}'});"],
    "description": "Set the testIdAttribute for test"
  },
  "Playwright basic network throttling": {
    "prefix": "pw-network-throttle-basic",
    "body": [
      "await page.route('**/*', async route => {",
      "\tawait new Promise(f => setTimeout(f, 100));",
      "\tawait route.continue();",
      "});"
    ],
    "description": "Throttle network requests globally with a 100ms delay"
  },
  "Playwright throttle with random delay": {
    "prefix": "pw-network-throttle-random",
    "body": [
      "await page.route('**/*', async route => {",
      "\tconst delay = Math.floor(Math.random() * ${1:500});",
      "\tawait new Promise(f => setTimeout(f, delay));",
      "\tawait route.continue();",
      "});"
    ],
    "description": "Throttle network requests with a random delay"
  },
  "Playwright throttle by request type": {
    "prefix": "pw-network-throttle-request-type",
    "body": [
      "await page.route('**/*', async route => {",
      "\tif (route.request().method() === '${1:POST}') {",
      "\t\tawait new Promise(f => setTimeout(f, ${2:300}));",
      "\t}",
      "\tawait route.continue();",
      "});"
    ],
    "description": "Throttle requests based on HTTP method (GET, POST, etc.)"
  },
  "Playwright throttle CSS and JS": {
    "prefix": "pw-network-throttle-css-js",
    "body": [
      "await page.route('**/*.{css,js}', async route => {",
      "\tawait new Promise(f => setTimeout(f, ${1:300}));",
      "\tawait route.continue();",
      "});"
    ],
    "description": "Throttle loading of CSS and JavaScript resources"
  },
  "Playwright throttle images": {
    "prefix": "pw-network-throttle-images",
    "body": [
      "await page.route('**/*.{png,jpg,jpeg,gif}', async route => {",
      "\tawait new Promise(f => setTimeout(f, ${1:500}));",
      "\tawait route.continue();",
      "});"
    ],
    "description": "Throttle loading of image resources"
  },
  "Playwright set viewport size for a test": {
    "prefix": "pw-test-use-viewport-hd-size",
    "body": [
      "test.use({ viewport: { width: ${1:1920}, height: ${2:1080 } } });"
    ],
    "description": "Set the viewport size for test"
  },
  "Playwright set locale and timezone for a test": {
    "prefix": "pw-test-use-locale-timezone",
    "body": [
      "test.use({",
      "\tlocale: '${1:de-DE}',",
      "\ttimezoneId: '${2:Europe/Berlin}'",
      "});"
    ],
    "description": "Set locale and timezone for a specific test"
  },
  "Playwright set cookie": {
    "prefix": "pw-set-cookie",
    "body": [
      "await context.addCookies([{",
      "\tname: '${1:cookieName}',",
      "\tvalue: '${2:cookieValue}',",
      "\tdomain: '${3:domain}',",
      "\tpath: '${4:/}'",
      "}]);",
      "await page.reload();"
    ],
    "description": "Set a cookie in the browser context"
  },
  "Playwright clear cookies": {
    "prefix": "pw-clear-cookies",
    "body": ["await context.clearCookies();"],
    "description": "Clear all cookies in the browser context"
  },
  "Playwright handle file download": {
    "prefix": "pw-download",
    "body": [
      "const [download] = await Promise.all([",
      "\tpage.waitForEvent('download'),",
      "\t${1:elementLocator}.click()",
      "]);",
      "await download.saveAs('${2:path/to/file}');"
    ],
    "description": "Handle file downloads"
  },
  "Playwright emulate geolocation": {
    "prefix": "pw-emulate-geolocation",
    "body": [
      "await context.setGeolocation({",
      "\tlatitude: ${1:37.7749},",
      "\tlongitude: ${2:-122.4194}",
      "\tpermissions: ['geolocation'],",
      "});"
    ],
    "description": "Emulate a specific geolocation"
  },
  "Playwright evaluate expression": {
    "prefix": "pw-eval",
    "body": [
      "const result = await page.evaluate(() => {",
      "\treturn ${1:document.title};",
      "});",
      "console.log(result);"
    ],
    "description": "Evaluate a JavaScript expression in the page context"
  },
  "Playwright frame locator with element fill": {
    "prefix": "pw-iframe-fill",
    "body": [
      "const element = await page.frameLocator('${1:iframeSelector}').getByLabel('${2:labelText}');",
      "await element.fill('${3:inputValue}');"
    ],
    "description": "Locate and fill an element inside a frame"
  },
  "Playwright frame locator with element click": {
    "prefix": "pw-iframe-click",
    "body": [
      "const element = await page.frameLocator('${1:iframeSelector}').locator('${2:cssSelector}');",
      "await element.click();"
    ],
    "description": "Locate and click an element inside a frame"
  },
  "Playwright frame locator with multiple elements": {
    "prefix": "pw-iframe-multiple-elements",
    "body": [
      "const frame = page.frameLocator('${1:iframeSelector}');",
      "await frame.fill('${2:inputSelector}', '${3:inputValue}');",
      "await frame.click('${4:buttonSelector}');",
      "await frame.waitForSelector('${5:nextElementSelector}');"
    ],
    "description": "Perform multiple interactions inside a frame, including waiting for an element"
  },
  "Playwright page add Locator Handler": {
    "prefix": "pw-locator-handler",
    "body": [
      "await page.addLocatorHandler(page.getByText('$1'), async () => {",
      "\tawait page.getByRole('button', { name: '$2' }).click();",
      "});"
    ],
    "description": "Add a custom locator handler"
  },
  "Playwright wait for response": {
    "prefix": "pw-wait-response",
    "body": [
      "const responsePromise = page.waitForResponse(response =>",
      "\tresponse.url() === '${1:http://localhost:3000/}'",
      "\t\t&& response.status() === ${1:200}",
      "\t\t&& response.request().method() === '${1:GET}'",
      ");",
      "",
      "const response = await responsePromise;"
    ],
    "description": "Wait for a specific response"
  },
  "Playwright beforeEach block": {
    "prefix": "pw-beforeEach",
    "body": [
      "test.beforeEach(async ({ ${1:page} }) => {",
      "\t${0:console.log('beforeEach');}",
      "});",
      ""
    ],
    "description": "Playwright beforeEach block"
  },
  "Playwright afterEach block": {
    "prefix": "pw-afterEach",
    "body": [
      "test.afterEach(async ({ ${1:page} }) => {",
      "\t${0:console.log('afterEach');}",
      "});",
      ""
    ],
    "description": "Playwright afterEach block"
  },
  "Playwright beforeAll block": {
    "prefix": "pw-beforeAll",
    "body": [
      "test.beforeAll(async ({ ${1:page} }) => {",
      "\t${0:console.log('beforeAll');}",
      "});",
      ""
    ],
    "description": "Playwright beforeAll block"
  },
  "Playwright afterAll block": {
    "prefix": "pw-afterAll",
    "body": [
      "test.afterAll(async ({ ${1:page} }) => {",
      "\t${0:console.log('afterAll');}",
      "});",
      ""
    ],
    "description": "Playwright afterAll block"
  },
  "Playwright Page Object": {
    "prefix": "pw-pom",
    "body": [
      "import { Page } from '@playwright/test';",
      "",
      "export class ${1:ExamplePage} {",
      "\turl = '';",
      "\tconstructor(protected page: Page) {}",
      "",
      "\tasync goto(parameters = ''): Promise<void> {",
      "\t\tawait this.page.goto(`\\${this.url}\\${parameters}`);",
      "\t}",
      "",
      "\tasync getTitle(): Promise<string> {",
      "\t\tawait this.page.waitForLoadState();",
      "\t\treturn await this.page.title();",
      "\t}",
      "",
      "\tasync waitForPageToLoadUrl(): Promise<void> {",
      "\t\tawait this.page.waitForURL(this.url);",
      "\t}",
      "}"
    ],
    "description": "Playwright Page Object Model (POM) class template"
  },
  "Playwright fixture for Page Object": {
    "prefix": "pw-fixture-pom",
    "body": [
      "import { test as base } from '@playwright/test';",
      "",
      "export const test = base.extend<{ ${1:examplePage}: ${2:ExamplePage} }>({",
      "\t${1:examplePage}: async ({ page }, use) => {",
      "\t\tconst pageObject = new ${2:ExamplePage}(page);",
      "\t\t// pageObject.goto();",
      "\t\tawait use(pageObject);",
      "\t}",
      "});"
    ],
    "description": "Playwright Fixture for Page Object Model (POM) class template"
  },
  "Playwright basic test": {
    "prefix": "pw-test",
    "body": [
      "test(\"$1\", async ({ page }) => {",
      "\t// Arrange:",
      "\t$2",
      "\t// Act:",
      "\t$3",
      "\t// Assert:",
      "\t$4",
      "});"
    ],
    "description": "Basic test"
  },
  "Playwright basic test with annotations": {
    "prefix": "pw-test-annotations",
    "body": [
      "test(\"$1\", {",
      "\tannotation: [",
      "\t\t{ type: 'category', description: 'test description' },",
      "\t],",
      "}, async ({ page }) => {",
      "\t// Arrange:",
      "\t$2",
      "\t// Act:",
      "\t$3",
      "\t// Assert:",
      "\t$4",
      "});"
    ],
    "description": "Basic test with annotations"
  },
  "Playwright basic test step": {
    "prefix": "pw-step",
    "body": [
      "const stepResult = await test.step(\"$1\", async () => {",
      "\t// Arrange:",
      "\t$2",
      "\t// Act:",
      "\t$3",
      "\t// Assert:",
      "\t$4",
      "});"
    ],
    "description": "Basic test step"
  },
  "Playwright basic test describe with before/after hooks": {
    "prefix": "pw-describe",
    "body": [
      "import { test, expect } from \"@playwright/test\";",
      "",
      "test.describe(\"$1\", () => {",
      "\ttest.beforeEach(async ({ page }) => {",
      "\t\t// TODO: open the page",
      "\t});",
      "",
      "\ttest.afterEach(async ({ page }) => {",
      "\t\t// TODO: clear the data after the test",
      "\t});",
      "",
      "\ttest(\"$2\", async ({ page }) => {",
      "\t\t// Arrange:",
      "\t\t// Act:",
      "\t\t// Assert:",
      "\t});",
      "});"
    ],
    "description": "Basic describe suite with before/after hooks"
  },
  "Playwright test describe with all before/after hooks": {
    "prefix": "pw-describe-full",
    "body": [
      "import { test, expect } from \"@playwright/test\";",
      "",
      "test.describe(\"$1\", () => {",
      "\ttest.beforeAll(async () => {",
      "\t\t// TODO: prepare the data before all test",
      "\t});",
      "",
      "\ttest.beforeEach(async ({ page }) => {",
      "\t\t// TODO: open the page before each test",
      "\t});",
      "",
      "\ttest.afterEach(async ({ page }) => {",
      "\t\t// TODO: clear the data after each test",
      "\t});",
      "",
      "\ttest.afterAll(async () => {",
      "\t\t// TODO: clear the data after all tests",
      "\t});",
      "",
      "\ttest(\"$2\", async ({ page }) => {",
      "\t\t// Arrange:",
      "\t\t// Act:",
      "\t\t// Assert:",
      "\t});",
      "});"
    ],
    "description": "Describe suite with all before/after hooks"
  }
}
